name: ci
on: [push, pull_request]
  # push
    # branches:
    #   - 'main'

permissions:
  id-token: write
  contents: read

jobs:
  # job:
  security:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      # - name: Run Snyk to check for vulnerabilities
      #   uses: snyk/actions/dotnet@master
      #   continue-on-error: false
      #   # run: synk auth
      #   env:
      #     SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      #   with:
      #     command: monitor
      - name: Snyk test
        run: |
          sudo npm install -g snyk
          sudo snyk auth ${{ secrets.SNYK_TOKEN }}
          sudo snyk test
      #   displayName: 'install snyk'
      # - script: |
      #     sudo snyk test --all-projects
      #     # sudo snyk test --file=OAI.sln
      #   displayName: 'sudo snyk test'



  # build:
  #   name: Build on dev
  #   runs-on: ubuntu-latest
    # steps:
  #     - name: Checkout 
  #       uses: actions/checkout@v2

      # - name: Login to Docker Hub
      #   if: github.ref == 'refs/heads/main'
      #   run: docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}

      # - name: Login to Docker Hub
      #   if: github.ref == 'refs/heads/dev'
      #   run: docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}

  #     - name: Get the version
  #       id: tag
  #       run: echo ::set-output name=tag::$(echo ${GITHUB_SHA:10})

  #     - name: Build the tagged Docker image
  #       run: docker build -t parth10/dotnetapp:${{steps.tag.outputs.tag}} .

  #     - name: Push the tagged Docker image
  #       run: docker push parth10/dotnetapp:${{steps.tag.outputs.tag}}

  #     - name: Build the latest Docker image
  #       run: docker build -t parth10/dotnetapp:latest .

  #     - name: Push the latest Docker image
  #       run: docker push parth10/dotnetapp:latest

  # deploy:
  #   name: Deploy on dev
  #   runs-on: ubuntu-latest
  #   if: github.ref == 'refs/heads/dev'
  #   steps:
  #   - name: 'Az CLI login'
  #     run : curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash

    # - name: Configure AWS credentials
    #   uses: aws-actions/configure-aws-credentials@v1
    #   with:
    #     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
    #     aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    #     aws-region: us-east-1

    # - name: "Get az version"
    #   run : |
    #     az login -u ${{ secrets.AZURE_USERNAME }} -p ${{ secrets.AZURE_PASSWORD }}
    #     az --version
    
  #     uses: azure/login@v1
  #     with:
  #         client-id: ${{ secrets.AZURE_CLIENT_ID }}
  #         tenant-id: ${{ secrets.AZURE_TENANT_ID }}
  #         subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  
  #   - name: 'Run Azure CLI commands'
  #     uses: azure/CLI@v1
  #     with:
  #       azcliversion: 2.0.72
  #       inlineScript: |
  #           az --version
  #           az account show